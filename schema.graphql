type Product {
  id: String
  type: String
}

input ProductWhereInput {
  id: String
  type: String
}

input ProductDataInput {
  id: String
  type: String
}

type Action {
  id: String!
  type: String
  configuration: JSONObject
  product: Product
}

type Actions {
  data: [Action]
  count: Int
}

input ActionWhereInput {
  id: String
  type: String
  configuration: JSONObject
  product: ProductWhereInput
}

input ActionDataInput {
  id: String
  type: String
  configuration: JSONObject
  product: ProductDataInput
}

type Query {
  actions(where: ActionWhereInput, take: Int, skip: Int, gt: ActionWhereInput, lt: ActionWhereInput, like: ActionWhereInput, orderBy: [JSONObject]): Actions
  action(where: ActionWhereInput): Action
  addresses(where: AddressWhereInput, take: Int, skip: Int, gt: AddressWhereInput, lt: AddressWhereInput, like: AddressWhereInput, orderBy: [JSONObject]): Addresses
  address(where: AddressWhereInput): Address
  assets(where: AssetWhereInput, take: Int, skip: Int, gt: AssetWhereInput, lt: AssetWhereInput, like: AssetWhereInput, orderBy: [JSONObject]): Assets
  asset(where: AssetWhereInput): Asset
  blocks(where: BlockWhereInput, take: Int, skip: Int, gt: BlockWhereInput, lt: BlockWhereInput, like: BlockWhereInput, orderBy: [JSONObject]): Blocks
  block(where: BlockWhereInput): Block
  fee(where: FeeWhereInput): Fee
  loans(where: LoanWhereInput, take: Int, skip: Int, gt: LoanWhereInput, lt: LoanWhereInput, like: LoanWhereInput, orderBy: [JSONObject]): Loans
  loan(where: LoanWhereInput): Loan
  outcomes(where: OutcomeWhereInput, take: Int, skip: Int, gt: OutcomeWhereInput, lt: OutcomeWhereInput, like: OutcomeWhereInput, orderBy: [JSONObject]): Outcomes
  outcome(where: OutcomeWhereInput): Outcome
  vaults(where: VaultWhereInput, take: Int, skip: Int, gt: VaultWhereInput, lt: VaultWhereInput, like: VaultWhereInput, orderBy: [JSONObject]): Vaults
  vault(where: VaultWhereInput): Vault
}

type Mutation {
  createAction(data: ActionDataInput): Action
  updateAction(where: ActionWhereInput, data: ActionDataInput): Action
  executeAction(where: ActionWhereInput): Action
  createAddress(data: AddressDataInput): Address
  updateAddress(data: AddressDataInput, where: AddressWhereInput): Address
  createAsset(data: AssetDataInput): Asset
  updateAsset(data: AssetDataInput, where: AssetWhereInput): Asset
  createLoan(data: LoanDataInput): Loan
  updateLoan(data: LoanDataInput, where: LoanWhereInput): Loan
  createOutcome(data: OutcomeDataInput): Outcome
  checkOutcome(where: OutcomeWhereInput): Outcome
  executeSignature(where: SignatureWhereInput, data: SignatureDataInput): Signature
  checkVault(where: VaultWhereInput): Vault
  lockVault(where: VaultWhereInput): Vault
  createVault(where: VaultWhereInput): Vault
  executeVault(where: VaultWhereInput): Vault
  broadcastVault(where: VaultWhereInput): Vault
  updateVault(where: VaultWhereInput, data: VaultDataInput): Vault
}

type Address {
  id: String!
  value: String
  publicKey: String
  type: String
  loan: Loan
}

type Addresses {
  data: [Address]
  count: Int
}

input AddressWhereInput {
  id: String
  value: String
  publicKey: String
  type: String
  loan: LoanWhereInput
}

input AddressDataInput {
  id: String
  value: String
  publicKey: String
  type: String
  loan: LoanDataInput
}

type Asset {
  id: String!
  type: String
  amount: String
  content: JSONObject
  collateral: Collateral
  addresses: [Address]
  action: Action
}

type Assets {
  data: [Asset]
  count: Int
}

input AssetWhereInput {
  id: String
  type: String
  amount: String
  content: JSONObject
  collateral: CollateralWhereInput
  addresses: [AddressWhereInput]
  action: ActionWhereInput
}

input AssetDataInput {
  id: String
  type: String
  amount: String
  content: JSONObject
  collateral: CollateralDataInput
  addresses: [AddressDataInput]
  action: ActionDataInput
}

type Block {
  id: String
  indexed: Boolean
}

type Blocks {
  data: [Block]
  count: Int
}

input BlockWhereInput {
  id: String
  indexed: Boolean
}

input BlockDataInput {
  id: String
}

type Borrower {
  id: String!
}

type Borrowers {
  data: [Borrower]
  count: Int
}

input BorrowerWhereInput {
  id: String
}

input BorrowerDataInput {
  id: String
}

type Collateral {
  id: String!
  assets: [Asset]
}

type Collaterals {
  data: [Collateral]
  count: Int
}

input CollateralWhereInput {
  id: String
  assets: [AssetWhereInput]
}

input CollateralDataInput {
  id: String
  assets: [AssetDataInput]
}

type Condition {
  id: ID
  filter: JSONObject
  module: String
  outcome: Outcome
  transaction: Transaction
}

type Conditions {
  data: [Condition]
  count: Int!
}

input ConditionWhereInput {
  id: ID
  filter: JSONObject
  module: String
  outcome: OutcomeWhereInput
}

input ConditionDataInput {
  id: ID
  filter: JSONObject
  module: String
  outcome: OutcomeWhereInput
  transaction: TransactionDataInput
}

type Fee {
  value: String
  vault: Vault
}

input FeeWhereInput {
  value: String
  vault: VaultWhereInput
}

type Lender {
  id: String!
}

type Lenders {
  data: [Lender]
  count: Int
}

input LenderWhereInput {
  id: String
}

input LenderDataInput {
  id: String
}

type Loan {
  id: String!
  interestRate: String
  term: String
  startDate: String
  endDate: String
  status: String
  principal: String
  borrower: Borrower
  lender: Lender
  vault: JSONObject
  collateral: Collateral
  addresses: [Address]
  action: Action
}

type Loans {
  data: [Loan]
  count: Int
}

input LoanWhereInput {
  id: String
  term: String
  interestRate: String
  startDate: String
  endDate: String
  status: String
  principal: String
  borrower: BorrowerWhereInput
  lender: LenderWhereInput
  addresses: [AddressWhereInput]
}

input LoanDataInput {
  id: String
  term: String
  interestRate: String
  startDate: String
  endDate: String
  status: String
  principal: String
  vault: JSONObject
  borrower: BorrowerDataInput
  lender: LenderDataInput
  collateral: CollateralDataInput
  addresses: [AddressDataInput]
  action: ActionDataInput
}

type Outcome {
  id: String
  description: String
  tag: String
  conditions: [Condition]
  signature: Signature
  block: Block
}

type Outcomes {
  data: [Outcome]
  count: Int
}

input OutcomeWhereInput {
  id: String
  description: String
  tag: String
  conditions: [ConditionWhereInput]
  block: BlockWhereInput
  signature: SignatureWhereInput
  OR: [OutcomeWhereInput]
}

input OutcomeDataInput {
  id: String
  description: String
  tag: String
  conditions: [ConditionDataInput]
  OR: [OutcomeDataInput]
}

type Signature {
  id: String
  publicKey: String
  wif: String
  outcome: Outcome
}

input SignatureWhereInput {
  id: String
  value: String
  publicKey: String
  released: Boolean
  wif: String
  escrow: JSONObject
  outcome: OutcomeWhereInput
  OR: [SignatureWhereInput]
}

input SignatureDataInput {
  id: String
  value: String
  publicKey: String
  released: Boolean
  transactions: [TransactionDataInput]
  OR: [SignatureDataInput]
}

type Transaction {
  id: String
  hex: String
  type: String
  base64: String
  inputs: Int
  outputs: Int
  txid: String
}

input TransactionWhereInput {
  id: String
  hex: String
  type: String
  base64: String
  inputs: Int
  outputs: Int
  txid: String
}

input TransactionDataInput {
  id: String
  hex: String
  type: String
  base64: String
  inputs: Int
  outputs: Int
}

type Vault {
  id: String!
  transactions: [Transaction]
  action: Action
}

type Vaults {
  data: [Vault]
  count: Int
}

input VaultWhereInput {
  id: String
  transactions: [TransactionWhereInput]
  loan: LoanWhereInput
}

input VaultDataInput {
  id: String
  transactions: [TransactionDataInput]
  loan: LoanWhereInput
  action: ActionDataInput
}

type Verification {
  id: ID
  leftOperand: JSONObject
  rightOperand: JSONObject
  operation: String
  outcome: Outcome
}

type Verifications {
  data: [Verification]
  count: Int!
}

input VerificationWhereInput {
  id: ID
  leftOperand: JSONObject
  rightOperand: JSONObject
  operation: String
  outcome: OutcomeWhereInput
}

input VerificationDataInput {
  id: ID
  leftOperand: JSONObject
  rightOperand: JSONObject
  operation: String
  outcome: OutcomeWhereInput
}

scalar DateTime

scalar EmailAddress

scalar PhoneNumber

scalar URL

scalar JSONObject
